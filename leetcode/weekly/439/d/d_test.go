// Generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"bytes"
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"testing"
)

func Test_d(t *testing.T) {
	if err := testutil.RunLeetCodeFuncWithFile(t, generateString, "d.txt", 0); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/weekly-contest-439/problems/lexicographically-smallest-generated-string/
// https://leetcode.cn/problems/lexicographically-smallest-generated-string/

func TestCompareInf(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil2.NewRandGenerator()
	inputGenerator := func() (s, t string) {
		//return "TFFFFFFFT", "baaab"
		rg.Clear()
		s = rg.StrInSet(1, 10, "TF")
		t = rg.Str(1, 14, 'a', 'b')
		return
	}

	testutil.CompareInf(_t, inputGenerator, runAC, generateString)
}

func runAC(s string, T string) string {
	n, m := len(s), len(T)
	t := []byte(T)
	ans := bytes.Repeat([]byte{'?'}, n+m-1)
	for i, b := range s {
		if b != 'T' {
			continue
		}
		sub := ans[i : i+m]
		for j, c := range sub {
			if c != '?' && c != t[j] {
				return ""
			}
			sub[j] = t[j]
		}
	}

	var dfs func(int) bool
	dfs = func(i int) bool {
		if i == n+m-1 {
			for i, b := range s {
				if b != 'F' {
					continue
				}
				sub := ans[i : i+m]
				if bytes.Equal(sub, t) {
					return false
				}
			}
			return true
		}
		if ans[i] != '?' {
			return dfs(i + 1)
		}
		for ans[i] = 'a'; ans[i] <= 'c'; ans[i]++ {
			if dfs(i+1) {
				return true
			}
		}
		ans[i] = '?'
		return false
	}
	if !dfs(0) {
		return ""
	}

	return string(ans)
}
